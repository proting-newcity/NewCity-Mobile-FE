name: Build and Release

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'

      - name: Install Dependencies
        run: flutter pub get

      # - name: Run Tests and Generate Coverage Report
      #   run: flutter test --coverage

      - name: Generate SonarQube Properties
        run: |
          echo "sonar.projectKey=proting-newcity_NewCity-Mobile-FE" > sonar-project.properties
          echo "sonar.organization=proting-newcity" >> sonar-project.properties
          echo "sonar.host.url=https://sonarcloud.io" >> sonar-project.properties
          echo "sonar.sources=lib" >> sonar-project.properties
          echo "sonar.tests=test" >> sonar-project.properties
          echo "sonar.exclusions=**/*.g.dart" >> sonar-project.properties
          echo "sonar.coverage.exclusions=**/*.g.dart" >> sonar-project.properties
          echo "sonar.flutter.reportPaths=coverage/lcov.info" >> sonar-project.properties
          echo "sonar.java.binaries=build" >> sonar-project.properties

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_release:
    name: Build and Release APK
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Create Release and Upload APK
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
